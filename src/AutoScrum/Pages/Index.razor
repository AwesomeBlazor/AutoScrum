@page "/"
@using AutoScrum.AzureDevOps
@using AutoScrum.AzureDevOps.Config
@using AutoScrum.AzureDevOps.Models
@using AutoScrum.Components
@inject HttpClient _httpClient

<h1>Ready, Set... ENGAGE!</h1>

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Azure DevOps Connection Info</CardTitle>
            </CardHeader>

            <CardBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                    <Validation Validator="@ValidationRule.IsEmail">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2">Email</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Placeholder="Your email..." @bind-Text="ConnectionInfo.UserEmail">
                                    <Feedback>
                                        <ValidationError>User email is required!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2">Access Token</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Placeholder="Your Azure DevOps Personal Access Token (PAT)..." @bind-Text="ConnectionInfo.PersonalAccessToken">
                                    <Feedback>
                                        <ValidationError>PAT is required!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2">Organization</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Placeholder="Azure DevOps Organization Name or URL" @bind-Text="ConnectionInfo.AzureDevOpsOrganization">
                                    <Feedback>
                                        <ValidationError>Organization is required!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is2">Project</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is10">
                                <TextEdit Placeholder="Azure DevOps Project" @bind-Text="ConnectionInfo.ProjectName">
                                    <Feedback>
                                        <ValidationError>Project is required!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                </Validations>
                <Field Horizontal="true" JustifyContent="JustifyContent.Start">
                    <FieldBody ColumnSize="ColumnSize.Is2">
                        <Button Color="Color.Primary" Clicked="@Submit">Submit</Button>
                    </FieldBody>
                </Field>
            </CardBody>
        </Card>
    </Column>
</Row>
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Current Sprint Work Items</CardTitle>
            </CardHeader>
            <CardBody>
                <WorkItemListComponent WorkItems="@WorkItems" IsOnBoard=true OnYesterday=AddYesterday OnToday=AddToday></WorkItemListComponent>
            </CardBody>
        </Card>
    </Column>
</Row>
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Yesterday</CardTitle>
            </CardHeader>
            <CardBody>
                <WorkItemListComponent WorkItems="@Yesterday" IsOnBoard=false OnRemove="wi => RemoveWorkItem(wi, false)"></WorkItemListComponent>
            </CardBody>
        </Card>
    </Column>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Today</CardTitle>
            </CardHeader>
            <CardBody>
                <WorkItemListComponent WorkItems="@Today" IsOnBoard=false OnRemove="wi => RemoveWorkItem(wi, false)"></WorkItemListComponent>
            </CardBody>
        </Card>
    </Column>
</Row>
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Output</CardTitle>
            </CardHeader>
            <CardBody>
                <MemoEdit Rows="25" @bind-Text="@Output" />
            </CardBody>
        </Card>
    </Column>
</Row>


@code {
    public string Output { get; set; } = "";

    public class AzureDevOpsConnectionInfo
    {
        public string UserEmail { get; set; }
        public string PersonalAccessToken { get; set; }
        public string AzureDevOpsOrganization { get; set; }
        public string ProjectName { get; set; }
    }

    public void AddYesterday(WorkItem wi)
    {
        if (!Yesterday.Any(x => x.Id == wi.Id))
        {
            Yesterday.Add(wi);
            UpdateOutput();
        }
    }

    public void AddToday(WorkItem wi)
    {
        Console.WriteLine("Add today");
        if (!Today.Any(x => x.Id == wi.Id))
        {
            Today.Add(wi);
            UpdateOutput();
        }
        else
        {
            Console.WriteLine("Or not");
        }
    }

    public void RemoveWorkItem(WorkItem wi, bool isToday)
    {
        var list = isToday ? Today : Yesterday;
        list.Remove(wi);

        UpdateOutput();
    }

    protected AzureDevOpsConnectionInfo ConnectionInfo { get; set; } = new AzureDevOpsConnectionInfo();
    protected List<WorkItem> WorkItems { get; set; } = null;

    protected List<WorkItem> Yesterday { get; set; } = new List<WorkItem>();
    protected List<WorkItem> Today { get; set; } = new List<WorkItem>();

    Validations validations;

    async Task Submit()
    {
        if (validations.ValidateAll())
        {
            validations.ClearAll();
            await GetDataFromAzureDevOps();
        }
        else
        {
            Console.WriteLine("Some validations failed...");
        }
    }

    public async Task GetDataFromAzureDevOps()
    {
        AzureDevOpsService devOpsService = new AzureDevOpsService(new AzureDevOpsConfig
        {
            UserEmail = ConnectionInfo.UserEmail,
            Organization = ConnectionInfo.AzureDevOpsOrganization,
            OrganizationUrl = new Uri($"https://{ConnectionInfo.AzureDevOpsOrganization}.visualstudio.com"),
            Project = ConnectionInfo.ProjectName,
            Token = ConnectionInfo.PersonalAccessToken
        }, _httpClient);

        Sprint sprint = await devOpsService.GetCurrentSprint();
        Console.WriteLine("Current Sprint: " + sprint?.Name);

        if (sprint != null)
        {
            Output = "Sprint " + sprint.Name + Environment.NewLine;
            var workItems = await devOpsService.GetWorkItemsForSprintForMe(sprint);

            Output += "Your Work items:" + Environment.NewLine;
            foreach (var item in workItems)
            {
                Console.WriteLine($"{item.Type} {item.Id}: {item.Title}");
                Output += $"  - {item.Type} {item.Id}: {item.Title}{Environment.NewLine}";
            }

            WorkItems = workItems;
        }
        else
        {
            Output = "Unable to load.";
        }

        await base.OnInitializedAsync();
    }

    public void UpdateOutput()
    {
        string output = string.Empty;
        output = GenerateDayReport("Yesterday", Yesterday);

        if(string.IsNullOrWhiteSpace(output))
        {
            output += Environment.NewLine;
        }

        output += GenerateDayReport("Today", Today);

        Output = output;

        this.StateHasChanged();
    }

    public static string GenerateDayReport(string day, List<WorkItem> workItems)
    {
        if (workItems.Any())
        {
            string report = string.Join(string.Empty, workItems.Select(wi => $"  - {wi.State} - {wi.Title} ({wi.Type}){Environment.NewLine}"));
            return $"{day}{Environment.NewLine}{report}";
        }

        return string.Empty;
    }
}