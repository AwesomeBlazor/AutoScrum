<Card Hoverable="!IsChild" Class="work-item-card">
    <TitleTemplate>
        <div class="flex-between">
            <div style="overflow: hidden">
                <a href="@WorkItem.Url">#@(WorkItem.Id)</a> @(WorkItem.Title)
            </div>
            <div>
                @if (HasYesterdayButton)
                {
                    <Button Type="@ButtonType.Link" OnClick="() => OnYesterday?.Invoke(WorkItem)">Yesterday</Button>
                }
                @if (HasTodayButton)
                {
                    <Button Type="@ButtonType.Link" OnClick="() => OnToday?.Invoke(WorkItem)">Today</Button>
                }
                @if (HasRemoveButton)
                {
                    <Button Type="@ButtonType.Link" Danger OnClick="() => OnRemove?.Invoke(WorkItem)">Remove</Button>
                }
            </div>
        </div>
    </TitleTemplate>
    <ChildContent>
        <div class="work-item-text">
            <div>
                @if (!string.IsNullOrWhiteSpace(WorkItem.AssignedToDisplayName))
                {
                    <span>Assigned to <span class="workItemValue">@(WorkItem.AssignedToDisplayName)</span></span>
                    <span> Changed at <span class="workItemValue">@(WorkItem.ChangedDate?.LocalDateTime.ToString("g") ?? "N/A")</span></span>
                }
            </div>
        </div>
        @if (ShowChildren && WorkItem?.Children?.Any() == true)
        {
            <WorkItemListComponent IsChild WorkItems="WorkItem.Children" IsOnBoard="IsOnBoard" OnToday=OnToday OnYesterday=OnYesterday OnRemove=OnRemove Inline></WorkItemListComponent>
        }
    </ChildContent>
</Card>
@code {

    [Parameter] public WorkItem WorkItem { get; set; } = null!;
    [Parameter] public bool IsOnBoard { get; set; }
    [Parameter] public Action<WorkItem>? OnToday { get; set; }
    [Parameter] public Action<WorkItem>? OnYesterday { get; set; }
    [Parameter] public Action<WorkItem>? OnRemove { get; set; }
    [Parameter] public bool ShowChildren { get; set; }
    [Parameter] public bool Inline { get; set; }
    [Parameter] public bool IsChild { get; set; }

    private bool HasTodayButton => IsOnBoard;
    private bool HasYesterdayButton => IsOnBoard;
    private bool HasRemoveButton => !IsOnBoard;
}