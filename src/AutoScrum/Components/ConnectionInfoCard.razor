@using Microsoft.AspNetCore.Components
@using AutoScrum.Core.Models
@using AutoScrum.AzureDevOps.Models
@using AutoScrum.Services
@using ConfigService = AutoScrum.Services.ConfigService

@inject AutoMessageService _messageService
@inject ConfigService _configService
@inject DailyScrumService _dailyScrum
@inject OutputService _outputService

<CollapsibleCard Title="Azure DevOps Connection Info" AnchorLink="connection-info" DefaultVisible>
    @* TODO: Refactor to new component: 'ConnectionInfoForm.razor' *@
    <Form Model="ConnectionInfoRequest"
          LabelColSpan="4"
          WrapperColSpan="20"
          @ref="_connectionForm"
          Loading="_connectionFormLoading">
        <FormItem>
            <AntDesign.Input @bind-Value="context.UserEmail" Placeholder="Your email..."/>
        </FormItem>
        <FormItem>
            <AntDesign.InputPassword @bind-Value="context.PersonalAccessToken" Placeholder="Your Azure DevOps Personal Access Token (PAT)"/>
        </FormItem>
        <FormItem>
            <AntDesign.Input @bind-Value="context.AzureDevOpsOrganization" Placeholder="Azure DevOps Organization Name or URL"/>
        </FormItem>
        <FormItem>
            <AntDesign.Input @bind-Value="context.ProjectName" Placeholder="Azure DevOps Project"/>
        </FormItem>
        <FormItem Label="@GenerateForLabel()">
            <RadioGroup @bind-Value="context.TeamFilterBy">
                <Radio RadioButton Value="@TeamFilterBy.Me">Just me</Radio>
                <Radio RadioButton Value="@TeamFilterBy.Team">Team</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem WrapperColOffset="4" WrapperColSpan="20">
            <Button Type="@ButtonType.Primary" OnClick="SubmitAsync">
                Submit
            </Button>
            <Button Type="@ButtonType.Default" OnClick="SaveConfigAsync">
                Save
            </Button>
            <Button Danger Type="@ButtonType.Default" OnClick="DeleteConfigAsync">
                Delete
            </Button>
        </FormItem>
    </Form>
</CollapsibleCard>

@code
{
    [Parameter]
    public AzureDevOpsConnectionInfo? ConnectionInfo { get; set; }

    private AzureDevOpsConnectionInfoRequest ConnectionInfoRequest { get; set; } = null!;

    private Form<AzureDevOpsConnectionInfoRequest> _connectionForm = null!;

    private bool _connectionFormLoading;

    protected override void OnParametersSet()
    {
        if (ConnectionInfo is not null)
        {
            ConnectionInfoRequest = new AzureDevOpsConnectionInfoRequest
            {
                ProjectName = ConnectionInfo.ProjectName,
                UserEmail = ConnectionInfo.UserEmail,
                PersonalAccessToken = ConnectionInfo.PersonalAccessToken,
                TeamFilterBy = ConnectionInfo.TeamFilterBy,
                AzureDevOpsOrganization = ConnectionInfo.AzureDevOpsOrganization
            };
        }
        else
        {
            ConnectionInfoRequest = new AzureDevOpsConnectionInfoRequest();
        }
    }

    private async Task SubmitAsync()
    {
        _connectionFormLoading = true;

        if (_connectionForm.Validate())
        {
            ReloadConnectionInfoFromForm();

            try
            {
                await _dailyScrum.GetDataFromAzureDevOpsAsync(ConnectionInfo);
            }
            catch (Exception e)
            {
                _messageService.Warning("There was an error getting sprint data, see the console for more");
                Console.WriteLine(e);

                _connectionFormLoading = false;
                return;
            }
            _outputService.Update();

            _messageService.Success("Loaded data from Azure DevOps!");
        }

        _connectionFormLoading = false;
    }

    private async Task SaveConfigAsync()
    {
        _connectionFormLoading = true;

        if (_connectionForm.Validate())
        {
            ReloadConnectionInfoFromForm();
            await _configService.SetConfig(ConnectionInfo!);

            _messageService.Success("Config saved successfully!");
        }

        _connectionFormLoading = false;
    }

    private async Task DeleteConfigAsync()
    {
        _connectionFormLoading = true;

        await _configService.Clear();

        ConnectionInfo = null;
        ConnectionInfoRequest = new AzureDevOpsConnectionInfoRequest();

        _messageService.Success("Config deleted successfully!");

        _connectionFormLoading = false;
    }

    private string GenerateForLabel() => "Generate for " + ConnectionInfoRequest.TeamFilterBy;

    private void ReloadConnectionInfoFromForm()
    {
        ConnectionInfo = new AzureDevOpsConnectionInfo(ConnectionInfoRequest.UserEmail!, ConnectionInfoRequest.PersonalAccessToken!, ConnectionInfoRequest.AzureDevOpsOrganization!, ConnectionInfoRequest.ProjectName!, ConnectionInfoRequest.TeamFilterBy);
    }
}